14,1,Name : Hacker Movie Club | Team:NULLKrypt3rs | Solves :71 | Type : Web | Note : Files here,,
14,2,"Hacker movies are very popular, so we needed a site that we can scale",,
14,3,"You better get started though, there are a lot of movies to watch.",,
14,4,Following is the page you get on clicking on the link,I,
14,5,"The first thing I do on a web challenge is check it‚Äôs source and then check every functionality of the web app, while passing it through a proxy ( preferably Burp suite ), just to check some hidden headers etc","A,I",
14,6,"The proxy helps in analysing requests later , as it‚Äôs saved in it‚Äôs history.",I ,5
14,7,The page didn‚Äôt have any functionalities apart from a report button.,I,5
14,8,It had a js file namely cdn.js with contents as.,I,5
14,9,Well the source also shows the presence of two other files.,I,5
14,10,Comparing mustache.min.js with the original file checked out and thus I was sure there wasn‚Äôt anything fishy inserted into it.,"A,I","5,10"
14,11,There are two observations to look into here :,,
14,12,There‚Äôs a comment that says,A,5
14,13,// The admin is on her way to check the page,I,12
14,14,It‚Äôs when the report endpoint returns a success message,I,5
14,15,"So, perhaps we‚Äôve to do XSS and leak out some data from the admin",I,13
14,16,But sooner than the thought enters my mind I realize that there‚Äôs no input data endpoint ( although I did try modifying the json being sent in the /api/report endpoint but nothing ever came back :( ),"A,I",5
14,17,"As we can see, the code uses Promise to fetch a file main.mst from some cdn.If you look closely the lines in cdn.js:",I,8
14,18,"and then the url, the pattern kinda stands out clearly ( isn‚Äôt it )",I,17
14,19,Any way that was just an observation.,,
14,20,"I usually when doing bug bounties ( or web questions ) setup the target scope to remove unnecessary clutter ( In bug bounties it helps a lot to focus ) , not necessary to solve this question though :",I,
14,21,Setting Target Scope,A,
14,22,Setting Target Scope,,
14,23,And then ‚úì the filtering options to Show only in-scope options :,A,
14,24,"With all that setup, now coming back to problem at hand : There‚Äôs a request to the endpoint /api/movies , which returns the following json.",I,"20,21"
14,25,I can‚Äôt help but notice that the last json entry is :,I,21
14,26,"It is the only entry with ""admin_only"":true,"" and interestingly all other movies are being displayed on the webpage but not this.",I,21
14,27,But why is it so ?,,
14,28,"Looking into the traffic in burpsuite, we notice the file main.mst being fetched, with the contents as.","A,I",
14,29,"Well, anyone who has slight knowledge of making websites with ‚Äúnew technologies‚Äù would understand that it‚Äôs a template file",I,28
14,30,"Well now the pieces fit in, mustache.min.js, so perhaps mustache‚Äôs template file",I,"10,29"
14,31,"Hmmm, now the other peculiarity as to why it wasn‚Äôt displaying the [REDACTED] content on the page, well it‚Äôs quite trivial :",I,
14,32,"So, only json, with admin_only as false would be displayed here, to test this theory ( as I didn‚Äôt know mustache and it‚Äôs templating syntax ) , just change the response of /api/movies in burp suite, changing Redacted‚Äôs admin_only to false.","A,I",31
14,33,And sure enough the theory checks out :,,
14,34,"Okay, so now we can fairly assume that the flag is in the redacted content.",I,32
14,35,"The million dollar question : How do we, get the webpage the admin sees ?",,
14,36,"I pondered many hours over this, going on and off on different questions and coming back to this but nothing came out",,
14,37,On the next day I was chatting with one of my friend ( he was also playing this CTF ) and he gave me a suggestion that maybe cache poisoning would work ( he was working that angle himself ).,,
14,38,"It instantly felt true, I remembered watching a talk on the same Web Cache Deception Attack , it was from BlackHat USA 2017, quite a great research.",,
14,39,"So, I started devising a strategy to cache poison the admin.",A,
14,40,Well the plan was to use a different url like :,I,39
14,41,http://app.hm.vulnerable.services/?this_is_cache_poisoning,I,39
14,42,Then I realized that we had no control over the url admin would go to ‚Ä¶.,I,39
14,43,"Or maybe we had, I changed the Referer header, thinking that maybe the admin was looking going to this url when the /api/report endpoint was called.","A,I",42
14,44,"So, I did all of that and then visited the same page ( in hopes that it would be saved in the cache ), however it was a rabbit hole and nothing could come of it.",A.I,43
14,45,"While looking at the headers, I had missed this Cache-Control: no-cache, which was effectively thwarting this.","A,I",44
14,46,The headers had these :,,
14,47,"So, well caching was in place on the server side",I,39
14,48,Looking up the X-Varnish header and Age header on google gives the following (here):,A.I,39
14,49,"Age - The amount of time the served item was in the cache, in seconds",I,48
14,50,"If the age is zero, the item was not served from the Varnish cache.",I,49
14,51,X-Varnish - The ID numbers of the current request and the item request that populated the Varnish cache,I,48
14,52,"If this field has only one value, the cache was populated by the request, and this is counted as a cache miss",I,51
14,53,"So, well mine was a cache miss and so, Age is 0 and only one ID in X-Varnish header.",I,48
14,54,"Recently I had read about web caching attack, Practical Web Cache Poisoning",,
14,55,"Reading the blog, you would find in the start itself under the section Caching 101 the following :",A,
14,56,Some companies host their own cache using software like Varnish,I,55
14,57,"Okay, CSAW people were also using Varnish ( but that is quite a popular caching software ) so that couldn‚Äôt be a coincidence.",I,55
14,58,In the Case Studies section under Basic Poisoning the author mentions how X-Forwarded-Host was a vulnerable parameter in case of Red Hat‚Äôs homepage ( Well two exact things matching ).,I,55
14,59,That can‚Äôt again be a coincidence,,
14,60,It also mentioned XSS being able to perform but after checking that I realized that the parameter wasn‚Äôt reflecting anywhere on the homepage ( so perhaps no XSS here ) .,I,55
14,61,Thus I thought of changing the X-Forwarded-Host to my_server and see if it‚Äôs reflected in .,A,60
14,62,"Now, in the default configuration of burpsuite, you have in the proxy options under the section Intercept Client Requests the following :",I,
14,63,Which says not to intercept any js file and thus initially I couldn‚Äôt intercept js request ( I soon realized that and changed the rules accordingly ),I,62
14,64,Now changing the X-Forwarded-Host,A,63
14,65,Intercepting app.js request,A,64
14,66,Intercepting app.js request,,
14,67,"Well, that didn‚Äôt change anything ( atleast then I thought so )",,
14,68,"I discussed the same with my friend, he tried and he also got similar results ( the host hadn‚Äôt changed ).",,
14,69,As you can see,,
14,70,"So, it can be seen that it‚Äôs being fetched from the cache and maybe if we hit it at the right time, we just might get it.",I ,65
14,71,"Okay, much theorizing, now let‚Äôs get our hands dirty",,
14,72,I initially started,,
14,73,I wrote a small python script regarding the same to poison the cache :,A,
14,74,Well here‚Äôs the output :,,
14,75,"We see, here the caching time is 2 minutes ( as the Age goes to a maximum of 120 )",I,73
14,76,"As we can see, we can overwrite the js file here and serve our cached js file.",I,75
14,77,"Well, that‚Äôs the key to the question",,
14,78,"We will be caching the app.js with our server‚Äôs IP and force the admin to retrieve the webpage, by reporting it.",A,75
14,79,"Then the admin will be served our app.js, thus effectively fetching the main.mst file from our server.",I,78
14,80,"Host a malicious main.mst on your server in the /cdn/ directory ( I hosted it on my aws instance with apache running, although ngrok would also be fine )",A,79
14,81,"Cache poison the server, to insert your server‚Äôs IP there",A,80
14,82,"Now, report to the admin, so that admin visit‚Äôs the page",A,81
14,83,The malicious main.mst will phone back to the server with all the movie list ( easy peasy ),I,82
14,84,"Now, as I said I‚Äôm no expert in mustache templating but it was quite easy to figure out how to get all the movie list onto our web server",A,83
14,85,"It was my friend who made this template though , here‚Äôs what it looks like .",,
14,86,"However, instead of document.cookie we use the mustache template here to fetch the list of movies and send it to our server.",I,84
14,87,And lo behold here‚Äôs what we get when we open the browser just after the cache poisoning is done,I,84
14,88,"So, I went on with reporting it and looking into my server logs :",A,84
14,89,Server Logs,,
14,90,Server Logs,,
14,91,Here I am fetching the webpage,,
14,92,"The img request to steal all the movie names ( from my browser, so no flag )",A,84
14,93,The admin visiting the page ( contains the flag ).,A,84
14,94,# Now we're sure that our entry has been put up in cache,,
14,95,"# So, just open the webbrowser, and report so that the admin",,
14,96,# gets our cached page,,
14,97,view raw,,
14,98,poison.py hosted with ‚ù§ by GitHub,,
14,99,Kudos to the CSAW team for making such a good question üéâüéâüéâ,,
14,100,"I forgot to mention there was a slight issue with CORS, so I had to enable that on my apache.",I,84
14,101,You can do the same by following the guide here,,
14,102,However instead of allowing it from only s.codepen.io allow it from all like this :,I,84
14,103,"Header set Access-Control-Allow-Origin ""*""",I,84
